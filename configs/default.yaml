config:
  name: GAT_pool_128_ae
  seed: 42
  device: cuda
  root_dir: ./ # project root dir
  dataset_dir: ./dataset/cylinder_vonkarman/Re200_cut/flow # dataset dir
  split_dir: ./dataset/cylinder_vonkarman/Re200_cut/flow_split # split dir
  output_dir: ./output/ # output dir
  mesh_file: D:\TA\TA2\GAE-ROM\dataset\cylinder_vonkarman\Re200_cut\cylinder_D04
  variable: velocity # ['VELOCITY-X', 'VELOCITY-Y'] # based on SU2 output docs
  data_sample: 20 # number of data samples to use for training
  normalization_method: zscore # ['zscore', 'magnitude']
  with_edge_features: false

model:
  encoder:
    act: relu
    convolution_layers:
      type: GATConv  # [GMMConv, ChebConv, GCNConv, GATConv] so far chebconv is the only one that works
      hidden_channels: [2, 64, 128, 128, 64, 32] # 2 is the input channels (velocity x,y)
      act: relu
      head: 4
      dropout: 0.1 # probability
      num_layers: 5
      kernel_size: 5
      K: 3
      dim: 2
    pool:
      is_pooling: true
      type: EdgePool
      in_channels: 64
      ratio: 0.5
      dropout: 0.1

  autoencoder:
    is_autoencoder: false
    encoder_layers: [1024, 256, 64]
    decoder_layers: [64, 256, 1024]
    latent_dim: 10
    act: relu
    dropout: 0 # probability

  decoder:
    act: relu
    convolution_layers:
      type: GATConv  # [GMMConv, ChebConv, GCNConv, GATConv] so far chebconv is the only one that works
      hidden_channels: [32, 64, 128, 128, 64 , 2]
      act: relu
      num_layers: 5
      head: 4
      dropout: 0 # probability
      kernel_size: 5
      K: 3
      dim: 2
    unpool:
      is_unpooling: true
      type: EdgePool
      dropout: 0.1

training:
  model_name: GAE_reduced
  num_workers: 0
  epochs: 100
  batch_size: 1
  print_train: 1
  amp: false
  single_batch_run: false
  save_best_model: true
  optimizer:
    type: AdamW
    learning_rate: 0.01
    weight_decay: 0.00001

  scheduler:
    type: StepLR # [StepLR, CosineAnnealingLR]
    step_size: 5
    gamma: 0.1

  early_stopping:
    early_stopping: 10
    patience: 10

  loss:
    type: rmse # [mse, rmse]

  metric:
    type: rmse # [mse, rmse]


